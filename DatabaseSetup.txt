Database setup for Patient Form API

Overview
- This project uses PostgreSQL. You can run it via Docker (recommended) or use a locally installed PostgreSQL server.
- The Spring Boot app listens on port 8081. Database defaults are:
  - Host: localhost
  - Port: 5432
  - Database: patients
  - Username: postgres
  - Password: password

Option A: Run PostgreSQL with Docker or Podman (recommended)
Prerequisites
- EITHER Docker Desktop/Engine + Compose plugin OR Podman/Podman Desktop
- Verify at least one toolset:
  - docker --version and docker compose version
  - OR podman --version and podman compose version

Steps
1) From the project root, start PostgreSQL:
   - docker compose up -d
   - OR podman compose up -d

2) Wait until the database is healthy:
   - docker compose ps  (or podman compose ps)
   - Optional logs: docker compose logs -f db  (or podman logs -f patientform-postgres)

3) Connection details (match application.properties):
   - Host: localhost
   - Port: 5432
   - Database: patients
   - Username: postgres
   - Password: password

4) Run the Spring Boot app (in another terminal):
   - Windows (PowerShell): .\mvnw spring-boot:run
   - macOS/Linux: ./mvnw spring-boot:run

5) Stop the database when done:
   docker compose down

Notes
- If port 5432 is already in use, edit compose.yaml to change the host port mapping, e.g. "5433:5432" and update spring.datasource.url accordingly.

Option B: Use a locally installed PostgreSQL (no Docker)
1) Install PostgreSQL (https://www.postgresql.org/download/)
2) Create a database and user (examples use default superuser "postgres"):
   - Create database: patients
   - Ensure you know the password for the postgres user (examples assume password)
3) Ensure the server listens on localhost:5432 (default). If you change the port, adjust the URL below.

application.properties configuration for local PostgreSQL
Place this in src/main/resources/application.properties (already present in the repo). Update values to match your installation if needed.

server.port=8081
spring.datasource.url=jdbc:postgresql://localhost:5432/patients
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate/JPA
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Ensure schema.sql runs at startup (optional)
spring.sql.init.mode=always

# Spring Boot Docker Compose integration is disabled to support Podman as well
spring.docker.compose.enabled=false

How it works
- The application will auto-create/update tables using Hibernate (ddl-auto=update). A schema.sql is also present and set to run at startup.

Verification
- Start the DB (Docker or local), then run the app. Check health endpoint:
  GET http://localhost:8081/patients/ping  -> ok

Troubleshooting
- Connection refused: ensure PostgreSQL is running and listening on the expected port.
- Authentication failed: verify username/password; update application.properties accordingly.
- Port in use (5432): change host port in compose.yaml (e.g., 5433:5432) and update spring.datasource.url to jdbc:postgresql://localhost:5433/patients
- SSL errors on some local setups: append ?sslmode=disable to the JDBC URL if necessary (e.g., jdbc:postgresql://localhost:5432/patients?sslmode=disable)
- Time zone issues: application sets JDBC time zone to UTC; adjust if needed.
